import { expect } from "chai";

import { Game } from "./main";

describe("Game", () => {
  it("should convert to and from strings", () => {
    let game = new Game(`
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............`);
    game.setTile(7, 7, "A");

    expect(game.toString()).to.equal(`Game(\`
...............
...............
...............
...............
...............
...............
...............
.......A.......
...............
...............
...............
...............
...............
...............
...............\`)`);
  });

  it("should play tiles", () => {
    let game = new Game();

    game.playTiles(0, 0, "r", "TEST");

    expect(game.toString()).to.equal(`Game(\`
TEST...........
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............\`)`);

    game.playTiles(0, 0, "d", "URNS");
    game.playTiles(3, 0, "d", "URNS");
    game.playTiles(0, 4, "r", "HIH");

    expect(game.toString()).to.equal(`Game(\`
TEST...........
U..U...........
R..R...........
N..N...........
SHISH..........
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............\`)`);
  });

  it("should score simple plays with multipliers", () => {
    let game = new Game();
    // no multipliers
    expect(game.playTiles(0, 0, "r", "ZOO", true)).to.equal(12);
    // triple word
    expect(game.playTiles(0, 0, "r", "ZOOS", true)).to.equal(39);
    // triple letter on Z
    expect(game.playTiles(8, 0, "r", "ZOO", true)).to.equal(32);
    // triple word and triple letter on Z
    expect(game.playTiles(8, 0, "r", "ZOOS", true)).to.equal(99);
  });

  it("should score existing tiles without multipliers", () => {
    let game = new Game();
    // double word
    expect(game.playTiles(5, 1, "r", "Z")).to.equal(20);
    // double word + double letter
    expect(game.playTiles(9, 1, "r", "SOOS")).to.equal(10);
    // shouldn't factor in any of the existing tiles' multipliers
    expect(game.playTiles(6, 1, "r", "OOO")).to.equal(17);

    expect(game.toString()).to.equal(`Game(\`
...............
.....ZOOOSOOS..
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............\`)`);
  });

  it("should account for perpendicular tiles in scoring", () => {
    let game = new Game();
    // no multipliers
    expect(game.playTiles(7, 1, "d", "PI")).to.equal(4);
    // double letter on O
    expect(game.playTiles(7, 4, "r", "SO")).to.equal(3);

    expect(game.toString()).to.equal(`Game(\`
...............
.......P.......
.......I.......
...............
.......SO......
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............\`)`);

    // double word on lies = 8
    // double word on pies (perpendicular) = 12
    // so (perpendicular) = 2 (should not include double letter)
    expect(game.playTiles(5, 3, "r", "LIES")).to.equal(22);

    expect(game.toString()).to.equal(`Game(\`
...............
.......P.......
.......I.......
.....LIES......
.......SO......
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............\`)`);
  });
});
